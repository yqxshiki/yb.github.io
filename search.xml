<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[后台管理系统 --vue-admin-webapp]]></title>
    <url>%2F%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%20--vue-admin-webapp.html</url>
    <content type="text"><![CDATA[这个本人第一次做比较大的项目,结合许多知识来完成项目,代码可能不怎么好看,优化也不行,请见谅。在之后我会继续提交的我的实力。因为我还是初学前端不到一年，如果下面的有所错误请提出来我会修改。 vue-admin-webapp看了掘金一篇文章后，仿照别人的demo自己做的一个vue后台管理系统 掘金原文章地址 本人Blog：点击进入 本项目涉及的技术栈有vuevue-cli vue-Router axios Echarts element-ui fastmock webpack 本项目github地址vue-admin-webapp 项目运行地址vue-admin-webapp 项目简介vue-admin-webapp 是一个后台管理系统,基于vuecli 和element-ui,使用fastmock来模拟数据,其中有图表,表格,权限,excel等等，你可以根据你的需求来添加路由。 安装123456789101112# 克隆项目git clone git@github.com:yqxshiki/vue-admin-webapp.git# 进入项目目录cd vue-admin-webapp# 安装依赖npm install# 启动服务npm run serve 启动后，将自动打开游览器 http://localhost:8080,你就可以看到项目效果了。 项目页面结构 出去登录页,页面主要来三个部分组成：头部 侧边栏 展示页,可以点击侧边栏来就行路由跳转 登录权限验证从fastmock中接收token,登录时存储在localStorage,设置全局前置守卫,在进入其他页面时，有token时才能进入，不然就跳到login页面 全局前置守卫12345678router.beforeEach((to, from, next) =&gt; &#123; const isLogin = localStorage.loginToken ? true : false; if (to.path == "/login") &#123; next(); &#125; else &#123; isLogin ? next() : next('/login') &#125;&#125;) 请求拦截12345678910axios.interceptors.request.use(config =&gt; &#123; // 判断是否有token if (localStorage.loginToken) &#123; config.headers.Authorization = localStorage.loginToken; &#125; return config;&#125;, err =&gt; &#123; // 请求错误 return Promise.reject(err);&#125;) 响应拦截12345678910111213141516axios.interceptors.response.use(res =&gt; &#123; return res;&#125;, err =&gt; &#123; const &#123; status &#125; = err.response; if (status == 401) &#123; // 后台定义401为过期 alert("token过期,请重新登录!") // 清楚token localStorage.removeItem("loginToken"); router.push("/login"); &#125; else &#123; alert(err.response.data) &#125; return Promise.reject(err); &#125;); Echart多图表会熟练运用Echart,直线图，饼图，柱状图，动态数据图等等,例如下图 Excel excel在实际项目中主要是后端做的，当然前端也可以做,只是我觉得现在没有必要所以没做。想了解的可以去搜索一下就有。 fastmock数据这里引用官方的介绍 fastmock可以让你在没有后端程序的情况下能真实地在线模拟ajax请求，你可以用fatmock实现项目初期纯前端的效果演示，也可以用fastmock实现开发中的数据模拟从而实现前后端分离。在使用fastmock之前，你的团队实现数据模拟可能是下面的方案中的一种或者多种 本地手写数据模拟，在前端代码中产生一大堆的mock代码。 利用mockjs或者canjs的can-fixture实现ajax拦截，本地配置必要的json规则。 后端在Controller层造假数据返回给前端。 我的fastmock 项目端口]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>element-ui</tag>
        <tag>Javascript</tag>
        <tag>echart</tag>
        <tag>fastmock</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端 vue后台管理系统 -- element-ui 分页]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%20vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%20--%20element-ui%20%E5%88%86%E9%A1%B5.html</url>
    <content type="text"><![CDATA[vue-admin-webapp项目运行地址点击进入 github地址 Element-uiElement，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库 element-ui 中文官网点击进入 我自己做的vue-admin-webapp项目中的源码 1234567891011121314151617181920212223242526272829&lt;el-table :data="pagingtable.slice((currentPage - 1) * pagesize, currentPage * pagesize)" border style="width: 100%"&gt; &lt;el-table-column prop="order" label="序号"&gt;&lt;/el-table-column&gt; &lt;el-table-column prop="gid" label="ID"&gt;&lt;/el-table-column&gt; &lt;el-table-column prop="name" label="产品名称"&gt;&lt;/el-table-column&gt; &lt;el-table-column prop="price" label="价格"&gt;&lt;/el-table-column&gt; &lt;el-table-column prop="number" label="数量"&gt;&lt;/el-table-column&gt; &lt;el-table-column width="120" prop="tag" label="状态"&gt; &lt;template slot-scope="scope"&gt; &lt;el-tag :type="scope.row.tag =='已取消' ? 'danger':'success' " disable-transitions &gt;&#123;&#123;scope.row.tag&#125;&#125;&lt;/el-tag&gt; &lt;/template&gt; &lt;/el-table-column&gt;&lt;/el-table&gt;&lt;el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="currentPage" :page-sizes="[5, 10, 15, 20]" :page-size="pagesize" layout="total, sizes, prev, pager, next, jumper" :total="pagingtable.length" &gt;&lt;/el-pagination&gt; &lt;!-- total是总数据量 --&gt; 123456789101112131415161718192021222324252627282930313233343536export default &#123; data() &#123; return &#123; pagingtable: [], //把接收到的数据存储到这里 pagesize: 5, //页面一次展示多少数据 currentPage: 1 // 第几页 &#125;; &#125;, methods: &#123; // 每页展示多少条数据 handleSizeChange(size) &#123; this.pagesize = size; &#125;, // 第几页 handleCurrentChange(currentPage) &#123; this.currentPage = currentPage; &#125;, // 获取数据 getorder() &#123; this.axios .get("/api/order") .then(res =&gt; &#123; // console.log(res); this.pagingtable = res.data.data.table; // console.log(this.pagingtable.length); &#125;) .catch(err =&gt; &#123; console.log(err); &#125;); &#125; &#125;, // 页面渲染前拿到数据 mounted() &#123; this.getorder(); &#125;&#125;; 效果显示]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端 vue后台管理系统 -- driver.js 蒙版引导]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%20vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%20--%20driver.html</url>
    <content type="text"><![CDATA[vue-admin-webapp项目运行地址点击进入 github地址 driver.js介绍driver.js 蒙版引导,也就是我们经常第一次使用时,会引导你正确使用该项目的功能 简单：易于使用，完全没有外部依赖性 轻量级：〜4kb大小，原始JavaScript，无外部依赖 高度可定制：具有强大的API，可以根据需要使用 突出显示任何内容：突出显示页面上的任何（字面上是任何）元素 功能介绍：为您的Web应用程序创建功能强大的功能介绍 安装1npm install driver.js 使用方法12345&lt;template&gt; &lt;div id="driver"&gt; &lt;div @click="guide()"&gt;引导&lt;/div&gt; &lt;/div&gt;&lt;/template&gt; 12345678910111213141516171819202122232425// 引用库import Driver from "driver.js";import "driver.js/dist/driver.min.css";// 新建一个guide.js 引人import steps from "./guide";export default &#123; mounted() &#123; this.driver = new Driver(&#123; opacity: 0.5,//透明度 animate: true,//动画 padding: 10,//边距 allowClose: true,//点击覆盖是否应该关闭 overlayClickNext: false,//单击覆盖是否应移动到下一步 doneBtnText: "完成", closeBtnText: "关闭", nextBtnText: "下一步", prevBtnText: "上一步" &#125;); &#125;, methods: &#123; guide() &#123; this.driver.defineSteps(steps); this.driver.start(); &#125; &#125; 新建的guide.js 123456789101112131415161718192021222324252627282930313233343536const steps = [ &#123; element: '#sidebar',//绑定元素,不要用class,id具有唯一性,比较好 popover: &#123; title: '折叠按钮',//标题 description: '点击收缩和展开菜单导航',//内容 position: 'bottom'//显示位置 &#125; &#125;, &#123; element: '#domshouye', popover: &#123; title: '面包屑导航', description: '用于显示当前菜单的位置', position: 'bottom-right' &#125; &#125;, &#123; element: '#domMessage', popover: &#123; title: '通知', description: '点击图标，右侧会显示通知消息', position: 'bottom-right' &#125; &#125;, &#123; element: '#domFullScreen', popover: &#123; title: '全屏显示', description: '点击图标，放大全屏显示系统', position: 'bottom-right' &#125; &#125;,]export default steps 效果显示 更加详细的内容可以去官网查看点击进入]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端 vue后台管理系统 -- vue-count-to 数字滚动插件]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%20vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%20--%20vue-count-to.html</url>
    <content type="text"><![CDATA[vue-admin-webapp项目运行地址点击进入 github地址 vue-count-to 数字滚动插件在做vue-admin-webapp项目中,首页就是有数字滚动效果,它是一个无依赖项的轻量级vue组件。 安装1npm install vue-count-to 使用方法123&lt;template&gt; &lt;count :startvalue='startvalue' :endvalue='endvalue' :duration='3000'&gt;&lt;/count&gt;&lt;/template&gt; 1234567891011121314&lt;script&gt; import count from 'vue-count-to'; export default &#123; components: &#123; count &#125;, data () &#123; return &#123; startvalue: 0, endvalue: 2017 &#125; &#125; &#125;&lt;/script&gt; startvalue:开始值endvalue:结束值duration：持续时间 效果显示 还有不少属性可以调整，可以去vue-count-to学习]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【博客搬家】博客搬家至CSDN！]]></title>
    <url>%2FCSDN.html</url>
    <content type="text"><![CDATA[【博客搬家】博客搬家至CSDN， 地址：https://blog.csdn.net/weixin_44233842]]></content>
  </entry>
  <entry>
    <title><![CDATA[git-bash基础命令行使用]]></title>
    <url>%2Fgit-bash.html</url>
    <content type="text"><![CDATA[在注册使用了github后，我们也应该学会使用git 来提交管理代码 git介绍是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理 git常用命令 配置git 用户名和密码 123git config --global user.name xxx(用户名)git confit --global user.email xxx(邮箱) 查看当前git的配置 1git config --list 初始化git 仓库 1git init 查看当前仓库的状态 1git status 将需要提交的代码文件添加的暂存区 123git add xxx(文件名)git add xxx(文件名) xxx(文件名) 上传多个文件时中间用空格分开git add . (.是提交当前文件夹内的所有文件) 将暂存区中的代码提交到本地仓库，形成一个版本 1git commit -m &quot;备注&quot; 查看本地仓库中的历史提交版本 1git log 将暂存区中文件删除 1git rm --cached xxx(文件名) 用暂存区中的文件覆盖工作目录中的文件 1git checkout --xxx(文件名) 回滚到本地仓库中特定版本并覆盖暂存区和工作目录 123git reset --hard commitID(commitID可以到git log中查看提交编号)如果有版本1，版本2（后提交），当回滚到版本1时版本2会被自动删除。 git 分支相关命令 查看分支 1git branch 创建分支 1git branch xxx(分支名) 切换分支 1git checkout xxx(分支名) 创建并切换分支 1git checkout -b xxx(分支名) 删除分支 1git branch -d xxx(分支名) 强制删除分支 1git branch -D xxx(分支名) 合并分支 1git merge xxx(需要当前主分支上，合并的分支名) git 相关命令 从远程仓库获取代码（拉取所有版本到本地） 1git clone origin 从远程仓库拉取代码（拉取最新版本到本地，开发过程中使用） 1git pull origin master 向远程仓库推送代码 123git push origin master(本地分支名称)：master(远程分支名称)如果本地分支同远程分支名称一样，可以只写一个 删除当前别名所对应的远程仓库地址 1git remote remove origin]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[了解px rpx em rem vw wh]]></title>
    <url>%2Fpixel.html</url>
    <content type="text"><![CDATA[pxpx是pixel的缩写,像素是指基本原色素及其灰度的基本编码。px是相对长度单位，在一般的开发情况下，我们选择px，但是并不是所有情况都用px来解决问题 rpxrpx主要收用于在做微信小程序开发时用到的一种单位,它能够在不同手机上面自适应屏幕尺寸. 在css中px 为css像素也叫逻辑像素;设备像素是设备屏幕的物理像素，任何设备的物理像素的数量都是固定的, DPRDPR是设备像素比,在默认缩放为100%的情况下，设备像素和逻辑像素的比值.iphone 6的设备像素为750，而iphone 6的逻辑像素为375 dpr =2,也就是1px =2rpx,因此我们经常在微信小程序里面用iphone 6当模板进行开发. emem也是相对长度单位，相对于对象文字的字体大小，如果没有设置，则默认为浏览器的默认字体大小. em的值是自己字体大小，如果没有设置就是继承父级元素的字体大小，依次向上找，如果打没有设置就是浏览器默认字体大小 remrem 是css3中新增的 (root em)，和em类似都是字体大小。但是它是相对HTML根元素的。当改变根元素的字体大小时，可以同时更改所有的字体大小。 vw–vhvw和vh是视口单位(viewport),就是依据浏览器窗口大小的单位。 1vw=可视窗口的宽度 * 1% 。 1vh=可视窗口的高度 * 1% 。]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue初识--vue常用指令]]></title>
    <url>%2FVue%E6%8C%87%E4%BB%A4.html</url>
    <content type="text"><![CDATA[Vue介绍Vue 是目前主流前端三大框架之一，是一套渐进式框架。他的作者是一位华人-尤雨溪，有中文官方文档Vue中文官方文档 在这里我们选择用CDN的方式来引入 1&lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt; Vue实例每一个Vue都是通过new Vue开始的 123456789101112let vm =new Vue(&#123; el:"", data:&#123; &#125;, methods:&#123; &#125;, computed:&#123; &#125;&#125;) 在HTML中我们可以使用 这种来插值. v-ifv-if 绑定的值在data中定义,根据定义值的真假来插入或者移除元素 1234567891011&lt;div id="app"&gt; &lt;p v-if="scok"&gt;你能看到我吗？&lt;/p&gt;&lt;/div&gt; let vm =new Vue(&#123; el:"#app", data: &#123; scok:true &#125;&#125;) 当 scok的值为 false null undefined 0 时，都不显示,为移除元素。 v-showv-show 和v-if相识 都是通过判断boolean 来显示或者不显示元素,当定义的值为 false null undefined 0是 ,不显示 12345678910&lt;div id="app"&gt;&lt;p v-show="msg"&gt;你猜你看得到我吗？&lt;/p&gt;&lt;/div&gt;let vm =new Vue(&#123; el:"#app", data:&#123; msg: null &#125;&#125;) v-show 和 v-if 的区别v-show 当不显示时 可以看到是用css 将display:none; 来就行隐藏 v-show 安全性不高，主要用于特殊类型的切换【显示与隐藏】,不适合做后台管理系统 而v-if 本质是移除Dom节点适合后台管理系统安全性比较高 v-modelv-model是数据双向绑定 123456789101112131415161718192021222324252627282930313233343536&lt;div id="app"&gt; &lt;input type="text" v-model="msg"&gt; &#123;&#123;msg&#125;&#125; &lt;hr&gt; &lt;input type="checkbox" name="checkbox" v-model="list"&gt; &#123;&#123;list&#125;&#125; &lt;hr&gt; &lt;input type="radio" value="true" name="radio" v-model="radio"&gt; &lt;label for=""&gt;true&lt;/label&gt; &lt;input type="radio" value="false" name="radio" v-model="radio"&gt; &lt;label for=""&gt;false&lt;/label&gt; &#123;&#123;radio&#125;&#125; &lt;hr&gt; &lt;input type="checkbox" value="apple" v-model="checkboxlist"&gt; &lt;input type="checkbox" value="orange" v-model="checkboxlist"&gt; &lt;input type="checkbox" value="Banana" v-model="checkboxlist"&gt; &#123;&#123;checkboxlist&#125;&#125; &lt;hr&gt; &lt;select v-model="array"&gt; &lt;option&gt;a&lt;/option&gt; &lt;option&gt;b&lt;/option&gt; &lt;option&gt;c&lt;/option&gt; &lt;option&gt;d&lt;/option&gt; &lt;/select&gt; &#123;&#123;array&#125;&#125;&lt;/div&gt; let vm =new Vue(&#123; el:"#app", data:&#123; msg:"", list:true radio:[], checkboxlist: [], array:[] &#125;&#125;) 通过v-model绑定,当用户在input框中输入数据时,会通过 显示出来 当是单选框时要注意，绑定的值要是数组[] 多个复选框时,绑定的值也要是数组[] 下拉列表时,绑定的值也要是数组[] ———————-持续更新中———————-]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用git github hexo 搭建属于自己的个人博客]]></title>
    <url>%2Fhexo.html</url>
    <content type="text"><![CDATA[1 安装git之前在学数据库的时候，用的是windows系统,在cmd中敲命令,用得不是很舒服，安装git 下载地址：git 安装：一路next就行 安装好后：打开Git Bash 输入： git version 这样就安装好了 2 安装nodenode是JavaScript的运行环境,其中npm是包管理工具，在之后我们需要利用npm下载一系列的东西 下载地址：node 安装：一路next就行,但在Custom Setup这一步记得选 Add to PATH 安装好后：打开cmd 输入： node -v 这样就安装好了 3 安装hexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 先创建一个文件夹，打开git bash ，然后cd到当前文件夹,运行 这是在全局安装hexocnpm install -g hexo-cli初始化项目 下载需要相应的文件hexo init cnpm install完成以后在文件夹中会获得不少文件 4 和github关联没有注册github的点击这里github,注册一个账号，然后创建一个存储库 在输入Repository name时要注意,名字要与你的github用户名一样，例如：yqxshiki.github.io,前面是你自己的名字后面加上 .github.io ———————-持续更新中———————-]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
